
motor_controller.elf:     file format elf32-littlearm
motor_controller.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000000

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00000360 memsz 0x00000360 flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08000360 align 2**16
         filesz 0x00000000 memsz 0x0000001c flags rw-
    LOAD off    0x0002001c vaddr 0x2000001c paddr 0x08000360 align 2**16
         filesz 0x00000000 memsz 0x00000400 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .text         00000360  08000000  08000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  20000000  20000000  00010360  2**0  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  20000000  08000360  00020000  2**2  ALLOC
  3 .stack        00000400  2000001c  08000360  0002001c  2**0  ALLOC
  4 .ARM.attributes 00000035  00000000  00000000  00010360  2**0  CONTENTS, READONLY
  5 .comment      0000002b  00000000  00000000  00010395  2**0  CONTENTS, READONLY
  6 .debug_line   0000005e  00000000  00000000  000103c0  2**0  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000006a  00000000  00000000  0001041e  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000012  00000000  00000000  00010488  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000028  00000000  00000000  000104a0  2**3  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000104c8  2**3  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000000 l    d  .bss	00000000 .bss
2000001c l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ./startup.o
080002f8 l       .text	00000000 loop
08000304 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 ./asm_functions.o
00000000 l    df *ABS*	00000000 main.c
08000320  w    F .text	00000000 RTC_Alarm_IRQHandler
08000320  w    F .text	00000000 HASH_RNG_IRQHandler
08000320  w    F .text	00000000 EXTI2_IRQHandler
08000320  w    F .text	00000000 TIM8_CC_IRQHandler
08000320  w    F .text	00000000 DebugMon_Handler
080002f0 g     F .text	00000000 reset_handler
00000400 g       *ABS*	00000000 STACK_SIZE
08000320  w    F .text	00000000 TIM1_CC_IRQHandler
08000320  w    F .text	00000000 DMA2_Stream5_IRQHandler
08000320  w    F .text	00000000 HardFault_Handler
08000320  w    F .text	00000000 DMA1_Stream5_IRQHandler
08000320  w    F .text	00000000 SysTick_Handler
08000320  w    F .text	00000000 PVD_IRQHandler
08000320  w    F .text	00000000 SDIO_IRQHandler
08000320  w    F .text	00000000 TAMP_STAMP_IRQHandler
08000360 g       .text	00000000 _sidata
08000320  w    F .text	00000000 PendSV_Handler
08000320  w    F .text	00000000 NMI_Handler
08000320  w    F .text	00000000 CAN2_RX1_IRQHandler
08000320  w    F .text	00000000 EXTI3_IRQHandler
20000014 g     O .bss	00000008 rotor
08000320  w    F .text	00000000 TIM8_TRG_COM_TIM14_IRQHandler
08000320  w    F .text	00000000 TIM1_UP_TIM10_IRQHandler
08000190 g     F .text	00000000 fsqrt
08000360 g       .text	00000000 _etext
20000000 g       .bss	00000000 _sbss
08000320  w    F .text	00000000 TIM8_UP_TIM13_IRQHandler
08000320  w    F .text	00000000 I2C3_ER_IRQHandler
08000320  w    F .text	00000000 EXTI0_IRQHandler
08000320  w    F .text	00000000 I2C2_EV_IRQHandler
08000320  w    F .text	00000000 DMA1_Stream2_IRQHandler
08000320  w    F .text	00000000 CAN1_RX0_IRQHandler
08000320  w    F .text	00000000 FPU_IRQHandler
08000320  w    F .text	00000000 OTG_HS_WKUP_IRQHandler
08000320  w    F .text	00000000 UsageFault_Handler
08000198 g     F .text	00000154 svm
08000320  w    F .text	00000000 CAN2_SCE_IRQHandler
08000320  w    F .text	00000000 DMA2_Stream2_IRQHandler
20000000 g       .data	00000000 _sdata
08000320  w    F .text	00000000 SPI1_IRQHandler
08000320  w    F .text	00000000 TIM6_DAC_IRQHandler
08000320  w    F .text	00000000 TIM1_BRK_TIM9_IRQHandler
08000320  w    F .text	00000000 DCMI_IRQHandler
08000320  w    F .text	00000000 CAN2_RX0_IRQHandler
08000320  w    F .text	00000000 DMA2_Stream3_IRQHandler
08000320 g     F .text	00000000 default_handler
08000320  w    F .text	00000000 USART6_IRQHandler
20000010 g     O .bss	00000004 i_c
0800018c g     F .text	00000000 finvtan2
08000320  w    F .text	00000000 USART3_IRQHandler
08000320  w    F .text	00000000 CRYP_IRQHandler
2000001c g       .bss	00000000 _ebss
20000000 g     O .bss	00000004 torque_per_amp
08000320  w    F .text	00000000 CAN1_RX1_IRQHandler
08000320  w    F .text	00000000 UART5_IRQHandler
08000320  w    F .text	00000000 DMA2_Stream0_IRQHandler
08000320  w    F .text	00000000 TIM4_IRQHandler
08000320  w    F .text	00000000 I2C1_EV_IRQHandler
08000320  w    F .text	00000000 DMA1_Stream6_IRQHandler
08000320  w    F .text	00000000 DMA1_Stream1_IRQHandler
08000320  w    F .text	00000000 UART4_IRQHandler
08000320  w    F .text	00000000 TIM3_IRQHandler
08000320  w    F .text	00000000 RCC_IRQHandler
08000320  w    F .text	00000000 TIM8_BRK_TIM12_IRQHandler
08000320  w    F .text	00000000 EXTI15_10_IRQHandler
08000000 g     O .text	00000000 Vectors
08000320  w    F .text	00000000 ADC_IRQHandler
08000320  w    F .text	00000000 DMA1_Stream7_IRQHandler
08000188 g     F .text	00000000 fsine_cosine
08000320  w    F .text	00000000 TIM7_IRQHandler
08000320  w    F .text	00000000 CAN2_TX_IRQHandler
08000320  w    F .text	00000000 TIM5_IRQHandler
08000320  w    F .text	00000000 DMA2_Stream7_IRQHandler
08000320  w    F .text	00000000 I2C3_EV_IRQHandler
08000320  w    F .text	00000000 EXTI9_5_IRQHandler
08000320  w    F .text	00000000 RTC_WKUP_IRQHandler
08000320  w    F .text	00000000 ETH_WKUP_IRQHandler
08000320  w    F .text	00000000 SPI2_IRQHandler
08000320  w    F .text	00000000 OTG_HS_EP1_IN_IRQHandler
08000320  w    F .text	00000000 MemManage_Handler
20000008 g     O .bss	00000004 i_a
08000194 g     F .text	00000002 main
08000320  w    F .text	00000000 DMA1_Stream0_IRQHandler
08000320  w    F .text	00000000 CAN1_TX_IRQHandler
08000320  w    F .text	00000000 SVC_Handler
20000004 g     O .bss	00000004 requested_torque
08000320  w    F .text	00000000 EXTI4_IRQHandler
2002fc00 g       *ABS*	00000000 _sstack
08000320  w    F .text	00000000 FSMC_IRQHandler
08000320  w    F .text	00000000 ETH_IRQHandler
08000320  w    F .text	00000000 OTG_HS_EP1_OUT_IRQHandler
08000320  w    F .text	00000000 WWDG_IRQHandler
080002ec g     F .text	00000004 TIM2_IRQHandler
08000320  w    F .text	00000000 OTG_FS_WKUP_IRQHandler
08000320  w    F .text	00000000 TIM1_TRG_COM_TIM11_IRQHandler
08000320  w    F .text	00000000 OTG_HS_IRQHandler
20030000 g       .text	00000000 _estack
08000320  w    F .text	00000000 EXTI1_IRQHandler
08000330 g     O .text	00000030 switch_state_vectors
20000000 g       .data	00000000 _edata
08000320  w    F .text	00000000 USART2_IRQHandler
08000320  w    F .text	00000000 I2C2_ER_IRQHandler
08000320  w    F .text	00000000 DMA2_Stream1_IRQHandler
08000320  w    F .text	00000000 CAN1_SCE_IRQHandler
08000320  w    F .text	00000000 FLASH_IRQHandler
08000320  w    F .text	00000000 DMA2_Stream4_IRQHandler
08000320  w    F .text	00000000 BusFault_Handler
08000320  w    F .text	00000000 USART1_IRQHandler
08000320  w    F .text	00000000 OTG_FS_IRQHandler
08000320  w    F .text	00000000 SPI3_IRQHandler
08000320  w    F .text	00000000 DMA1_Stream4_IRQHandler
2000000c g     O .bss	00000004 i_b
08000320  w    F .text	00000000 I2C1_ER_IRQHandler
08000320  w    F .text	00000000 DMA2_Stream6_IRQHandler
08000320  w    F .text	00000000 DMA1_Stream3_IRQHandler



Disassembly of section .text:

08000000 <Vectors>:
 8000000:	00 00 03 20 f1 02 00 08 21 03 00 08 21 03 00 08     ... ....!...!...
 8000010:	21 03 00 08 21 03 00 08 21 03 00 08 00 00 00 00     !...!...!.......
	...
 800002c:	21 03 00 08 21 03 00 08 00 00 00 00 21 03 00 08     !...!.......!...
 800003c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800004c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800005c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800006c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800007c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800008c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800009c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 80000ac:	21 03 00 08 ed 02 00 08 21 03 00 08 21 03 00 08     !.......!...!...
 80000bc:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 80000cc:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 80000dc:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 80000ec:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 80000fc:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800010c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800011c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800012c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800013c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800014c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800015c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800016c:	21 03 00 08 21 03 00 08 21 03 00 08 21 03 00 08     !...!...!...!...
 800017c:	21 03 00 08 21 03 00 08 21 03 00 08                 !...!...!...

08000188 <fsine_cosine>:
fsine_cosine():
 8000188:	bf00      	nop
 800018a:	bf00      	nop

0800018c <finvtan2>:
finvtan2():
 800018c:	bf00      	nop
 800018e:	bf00      	nop

08000190 <fsqrt>:
fsqrt():
 8000190:	eeb1 0ac0 	vsqrt.f32	s0, s0

08000194 <main>:
main():
 8000194:	e7fe      	b.n	8000194 <main>
 8000196:	bf00      	nop

08000198 <svm>:
svm():
 8000198:	4a48      	ldr	r2, [pc, #288]	; (80002bc <svm+0x124>)
 800019a:	4b49      	ldr	r3, [pc, #292]	; (80002c0 <svm+0x128>)
 800019c:	ed92 6a00 	vldr	s12, [r2]
 80001a0:	eddf 6a48 	vldr	s13, [pc, #288]	; 80002c4 <svm+0x12c>
 80001a4:	edd3 5a00 	vldr	s11, [r3]
 80001a8:	ed9f 4a47 	vldr	s8, [pc, #284]	; 80002c8 <svm+0x130>
 80001ac:	4b47      	ldr	r3, [pc, #284]	; (80002cc <svm+0x134>)
 80001ae:	b530      	push	{r4, r5, lr}
 80001b0:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 80001b4:	ee66 7a05 	vmul.f32	s15, s12, s10
 80001b8:	eef8 3a00 	vmov.f32	s7, #128	; 0xc0000000 -2.0
 80001bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80001c0:	ed2d 8b06 	vpush	{d8-d10}
 80001c4:	eeb1 7a65 	vneg.f32	s14, s11
 80001c8:	ed9f 8a41 	vldr	s16, [pc, #260]	; 80002d0 <svm+0x138>
 80001cc:	4c41      	ldr	r4, [pc, #260]	; (80002d4 <svm+0x13c>)
 80001ce:	eee6 5aa3 	vfma.f32	s11, s13, s7
 80001d2:	b087      	sub	sp, #28
 80001d4:	ee37 7a46 	vsub.f32	s14, s14, s12
 80001d8:	ee37 6a88 	vadd.f32	s12, s15, s16
 80001dc:	ed94 0a01 	vldr	s0, [r4, #4]
 80001e0:	edd4 4a00 	vldr	s9, [r4]
 80001e4:	ed83 7a00 	vstr	s14, [r3]
 80001e8:	eea7 6a05 	vfma.f32	s12, s14, s10
 80001ec:	eee7 5a04 	vfma.f32	s11, s14, s8
 80001f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80001f4:	eef0 8a46 	vmov.f32	s17, s12
 80001f8:	eea4 0aa4 	vfma.f32	s0, s9, s9
 80001fc:	eeb0 9a65 	vmov.f32	s18, s11
 8000200:	f7ff ffc6 	bl	8000190 <fsqrt>
 8000204:	edd4 0a01 	vldr	s1, [r4, #4]
 8000208:	eeb0 aa40 	vmov.f32	s20, s0
 800020c:	ed94 0a00 	vldr	s0, [r4]
 8000210:	f7ff ffbc 	bl	800018c <finvtan2>
 8000214:	4a30      	ldr	r2, [pc, #192]	; (80002d8 <svm+0x140>)
 8000216:	4b31      	ldr	r3, [pc, #196]	; (80002dc <svm+0x144>)
 8000218:	edd2 9a00 	vldr	s19, [r2]
 800021c:	edd3 7a00 	vldr	s15, [r3]
 8000220:	ee2a aa29 	vmul.f32	s20, s20, s19
 8000224:	ee30 0a08 	vadd.f32	s0, s0, s16
 8000228:	ee6a 9a27 	vmul.f32	s19, s20, s15
 800022c:	f7ff ffac 	bl	8000188 <fsine_cosine>
 8000230:	eef0 5a49 	vmov.f32	s11, s18
 8000234:	eeb0 6a68 	vmov.f32	s12, s17
 8000238:	eed9 5a80 	vfnms.f32	s11, s19, s0
 800023c:	2300      	movs	r3, #0
 800023e:	4a28      	ldr	r2, [pc, #160]	; (80002e0 <svm+0x148>)
 8000240:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000244:	ee99 6aa0 	vfnms.f32	s12, s19, s1
 8000248:	461c      	mov	r4, r3
 800024a:	eeb0 7a48 	vmov.f32	s14, s16
 800024e:	edcd 0a02 	vstr	s1, [sp, #8]
 8000252:	eef0 4a48 	vmov.f32	s9, s16
 8000256:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800025a:	edd2 7a01 	vldr	s15, [r2, #4]
 800025e:	4611      	mov	r1, r2
 8000260:	edd1 6a00 	vldr	s13, [r1]
 8000264:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000268:	b2d9      	uxtb	r1, r3
 800026a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800026e:	3301      	adds	r3, #1
 8000270:	3208      	adds	r2, #8
 8000272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800027a:	bf54      	ite	pl
 800027c:	eef0 7a64 	vmovpl.f32	s15, s9
 8000280:	eef0 7a45 	vmovmi.f32	s15, s10
 8000284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800028c:	bfc8      	it	gt
 800028e:	eeb0 7a67 	vmovgt.f32	s14, s15
 8000292:	bfc8      	it	gt
 8000294:	460c      	movgt	r4, r1
 8000296:	2b30      	cmp	r3, #48	; 0x30
 8000298:	d1df      	bne.n	800025a <svm+0xc2>
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <svm+0x14c>)
 800029c:	4d12      	ldr	r5, [pc, #72]	; (80002e8 <svm+0x150>)
 800029e:	6818      	ldr	r0, [r3, #0]
 80002a0:	6859      	ldr	r1, [r3, #4]
 80002a2:	689a      	ldr	r2, [r3, #8]
 80002a4:	ab03      	add	r3, sp, #12
 80002a6:	c307      	stmia	r3!, {r0, r1, r2}
 80002a8:	ab06      	add	r3, sp, #24
 80002aa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80002ae:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
 80002b2:	832b      	strh	r3, [r5, #24]
 80002b4:	b007      	add	sp, #28
 80002b6:	ecbd 8b06 	vpop	{d8-d10}
 80002ba:	bd30      	pop	{r4, r5, pc}
 80002bc:	2000000c 	.word	0x2000000c
 80002c0:	20000008 	.word	0x20000008
 80002c4:	bf5db3d7 	.word	0xbf5db3d7
 80002c8:	3f5db3d7 	.word	0x3f5db3d7
 80002cc:	20000010 	.word	0x20000010
 80002d0:	00000000 	.word	0x00000000
 80002d4:	20000014 	.word	0x20000014
 80002d8:	20000004 	.word	0x20000004
 80002dc:	20000000 	.word	0x20000000
 80002e0:	08000330 	.word	0x08000330
 80002e4:	08000324 	.word	0x08000324
 80002e8:	40010000 	.word	0x40010000

080002ec <TIM2_IRQHandler>:
TIM2_IRQHandler():
 80002ec:	f7ff bf54 	b.w	8000198 <svm>

080002f0 <reset_handler>:
reset_handler():
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:405
.section .text.reset_handler,"ax",%progbits
.balign 4//just align everything on 4 byte boudenry, flash is plentyfull
.thumb_func
	reset_handler:

	ldr r0, =_sidata
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <loop2+0xc>)
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:406
	ldr r1, =_sdata
 80002f2:	4908      	ldr	r1, [pc, #32]	; (8000314 <loop2+0x10>)
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:407
	ldr r2, =_edata
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <loop2+0x14>)
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:408
	ldr r3, =_ebss//load multiple?
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <loop2+0x18>)

080002f8 <loop>:
loop():
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:411

	loop:
	ldr r4, [r0], 4
 80002f8:	f850 4b04 	ldr.w	r4, [r0], #4
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:412
	str r4, [r1], 4
 80002fc:	f841 4b04 	str.w	r4, [r1], #4
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:413
	subs r5, r2, r0
 8000300:	1a15      	subs	r5, r2, r0
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:414
	bne loop
 8000302:	d1f9      	bne.n	80002f8 <loop>

08000304 <loop2>:
loop2():
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:417

	loop2:
	str r5, [r2], 4
 8000304:	f842 5b04 	str.w	r5, [r2], #4
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:418
	cmp r3, r2
 8000308:	4293      	cmp	r3, r2
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:419
	bne loop2
 800030a:	d1fb      	bne.n	8000304 <loop2>
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:422


	b main
 800030c:	f7ff bf42 	b.w	8000194 <main>
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:405
	ldr r0, =_sidata
 8000310:	08000360 	.word	0x08000360
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:406
	ldr r1, =_sdata
 8000314:	20000000 	.word	0x20000000
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:407
	ldr r2, =_edata
 8000318:	20000000 	.word	0x20000000
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:408
	ldr r3, =_ebss//load multiple?
 800031c:	2000001c 	.word	0x2000001c

08000320 <default_handler>:
DMA1_Stream3_IRQHandler():
/home/david/Documents/workspace-arm/motor_controller/Debug/../startup.S:430

.section .text.default_handler,"ax",%progbits
.balign 4
.thumb_func
	default_handler:
	b.n default_handler
 8000320:	e7fe      	b.n	8000320 <default_handler>
 8000322:	bf00      	nop
 8000324:	50504050 	.word	0x50504050
 8000328:	50405040 	.word	0x50405040
 800032c:	40504040 	.word	0x40504040

08000330 <switch_state_vectors>:
	...
